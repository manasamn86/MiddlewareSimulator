// source: convivo.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_any_pb = require('google-protobuf/google/protobuf/any_pb.js');
goog.object.extend(proto, google_protobuf_any_pb);
goog.exportSymbol('proto.czm.convivo.AvailablePathologists', null, global);
goog.exportSymbol('proto.czm.convivo.Case', null, global);
goog.exportSymbol('proto.czm.convivo.CaseEnd', null, global);
goog.exportSymbol('proto.czm.convivo.Error', null, global);
goog.exportSymbol('proto.czm.convivo.Error.ErrorType', null, global);
goog.exportSymbol('proto.czm.convivo.Image', null, global);
goog.exportSymbol('proto.czm.convivo.Image.ImageFormat', null, global);
goog.exportSymbol('proto.czm.convivo.ImageForCase', null, global);
goog.exportSymbol('proto.czm.convivo.ImageMeta', null, global);
goog.exportSymbol('proto.czm.convivo.MachineDetails', null, global);
goog.exportSymbol('proto.czm.convivo.Message', null, global);
goog.exportSymbol('proto.czm.convivo.Message.MessageType', null, global);
goog.exportSymbol('proto.czm.convivo.Pathologist', null, global);
goog.exportSymbol('proto.czm.convivo.Patient', null, global);
goog.exportSymbol('proto.czm.convivo.PatientID', null, global);
goog.exportSymbol('proto.czm.convivo.PlatformLogin', null, global);
goog.exportSymbol('proto.czm.convivo.PlatformLogout', null, global);
goog.exportSymbol('proto.czm.convivo.RGBColour', null, global);
goog.exportSymbol('proto.czm.convivo.ScanStatus', null, global);
goog.exportSymbol('proto.czm.convivo.Session', null, global);
goog.exportSymbol('proto.czm.convivo.Sex', null, global);
goog.exportSymbol('proto.czm.convivo.Spot', null, global);
goog.exportSymbol('proto.czm.convivo.UserInfo', null, global);
goog.exportSymbol('proto.czm.convivo.UserInfo.Role', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.czm.convivo.Message = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.czm.convivo.Message, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.czm.convivo.Message.displayName = 'proto.czm.convivo.Message';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.czm.convivo.PlatformLogin = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.czm.convivo.PlatformLogin, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.czm.convivo.PlatformLogin.displayName = 'proto.czm.convivo.PlatformLogin';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.czm.convivo.PlatformLogout = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.czm.convivo.PlatformLogout, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.czm.convivo.PlatformLogout.displayName = 'proto.czm.convivo.PlatformLogout';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.czm.convivo.Session = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.czm.convivo.Session, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.czm.convivo.Session.displayName = 'proto.czm.convivo.Session';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.czm.convivo.Error = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.czm.convivo.Error, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.czm.convivo.Error.displayName = 'proto.czm.convivo.Error';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.czm.convivo.MachineDetails = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.czm.convivo.MachineDetails, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.czm.convivo.MachineDetails.displayName = 'proto.czm.convivo.MachineDetails';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.czm.convivo.Case = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.czm.convivo.Case, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.czm.convivo.Case.displayName = 'proto.czm.convivo.Case';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.czm.convivo.CaseEnd = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.czm.convivo.CaseEnd, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.czm.convivo.CaseEnd.displayName = 'proto.czm.convivo.CaseEnd';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.czm.convivo.ScanStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.czm.convivo.ScanStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.czm.convivo.ScanStatus.displayName = 'proto.czm.convivo.ScanStatus';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.czm.convivo.Image = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.czm.convivo.Image, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.czm.convivo.Image.displayName = 'proto.czm.convivo.Image';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.czm.convivo.ImageMeta = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.czm.convivo.ImageMeta, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.czm.convivo.ImageMeta.displayName = 'proto.czm.convivo.ImageMeta';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.czm.convivo.Spot = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.czm.convivo.Spot, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.czm.convivo.Spot.displayName = 'proto.czm.convivo.Spot';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.czm.convivo.RGBColour = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.czm.convivo.RGBColour, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.czm.convivo.RGBColour.displayName = 'proto.czm.convivo.RGBColour';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.czm.convivo.ImageForCase = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.czm.convivo.ImageForCase, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.czm.convivo.ImageForCase.displayName = 'proto.czm.convivo.ImageForCase';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.czm.convivo.Patient = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.czm.convivo.Patient, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.czm.convivo.Patient.displayName = 'proto.czm.convivo.Patient';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.czm.convivo.PatientID = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.czm.convivo.PatientID, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.czm.convivo.PatientID.displayName = 'proto.czm.convivo.PatientID';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.czm.convivo.AvailablePathologists = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.czm.convivo.AvailablePathologists.repeatedFields_, null);
};
goog.inherits(proto.czm.convivo.AvailablePathologists, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.czm.convivo.AvailablePathologists.displayName = 'proto.czm.convivo.AvailablePathologists';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.czm.convivo.Pathologist = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.czm.convivo.Pathologist, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.czm.convivo.Pathologist.displayName = 'proto.czm.convivo.Pathologist';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.czm.convivo.UserInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.czm.convivo.UserInfo.repeatedFields_, null);
};
goog.inherits(proto.czm.convivo.UserInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.czm.convivo.UserInfo.displayName = 'proto.czm.convivo.UserInfo';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.czm.convivo.Message.prototype.toObject = function(opt_includeInstance) {
  return proto.czm.convivo.Message.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.czm.convivo.Message} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.czm.convivo.Message.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    details: (f = msg.getDetails()) && google_protobuf_any_pb.Any.toObject(includeInstance, f),
    sessionid: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.czm.convivo.Message}
 */
proto.czm.convivo.Message.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.czm.convivo.Message;
  return proto.czm.convivo.Message.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.czm.convivo.Message} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.czm.convivo.Message}
 */
proto.czm.convivo.Message.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.czm.convivo.Message.MessageType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = new google_protobuf_any_pb.Any;
      reader.readMessage(value,google_protobuf_any_pb.Any.deserializeBinaryFromReader);
      msg.setDetails(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSessionid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.czm.convivo.Message.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.czm.convivo.Message.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.czm.convivo.Message} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.czm.convivo.Message.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getDetails();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_any_pb.Any.serializeBinaryToWriter
    );
  }
  f = message.getSessionid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.czm.convivo.Message.MessageType = {
  UNKNOWN: 0,
  LIVE_IMAGE: 1,
  RECORDED_IMAGE: 2,
  SCANNING_STATUS: 3,
  AVAILABLE_PATHOLOGISTS: 4,
  ERROR_OCCURRED: 5,
  START_CASE: 6,
  CASE_STARTED: 7,
  END_CASE: 8,
  CASE_ENDED: 11,
  LOGIN: 9,
  LOGOUT: 10
};

/**
 * optional MessageType type = 1;
 * @return {!proto.czm.convivo.Message.MessageType}
 */
proto.czm.convivo.Message.prototype.getType = function() {
  return /** @type {!proto.czm.convivo.Message.MessageType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.czm.convivo.Message.MessageType} value
 * @return {!proto.czm.convivo.Message} returns this
 */
proto.czm.convivo.Message.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional google.protobuf.Any details = 2;
 * @return {?proto.google.protobuf.Any}
 */
proto.czm.convivo.Message.prototype.getDetails = function() {
  return /** @type{?proto.google.protobuf.Any} */ (
    jspb.Message.getWrapperField(this, google_protobuf_any_pb.Any, 2));
};


/**
 * @param {?proto.google.protobuf.Any|undefined} value
 * @return {!proto.czm.convivo.Message} returns this
*/
proto.czm.convivo.Message.prototype.setDetails = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.czm.convivo.Message} returns this
 */
proto.czm.convivo.Message.prototype.clearDetails = function() {
  return this.setDetails(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.czm.convivo.Message.prototype.hasDetails = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string sessionID = 3;
 * @return {string}
 */
proto.czm.convivo.Message.prototype.getSessionid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.czm.convivo.Message} returns this
 */
proto.czm.convivo.Message.prototype.setSessionid = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.czm.convivo.PlatformLogin.prototype.toObject = function(opt_includeInstance) {
  return proto.czm.convivo.PlatformLogin.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.czm.convivo.PlatformLogin} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.czm.convivo.PlatformLogin.toObject = function(includeInstance, msg) {
  var f, obj = {
    userid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    password: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.czm.convivo.PlatformLogin}
 */
proto.czm.convivo.PlatformLogin.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.czm.convivo.PlatformLogin;
  return proto.czm.convivo.PlatformLogin.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.czm.convivo.PlatformLogin} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.czm.convivo.PlatformLogin}
 */
proto.czm.convivo.PlatformLogin.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPassword(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.czm.convivo.PlatformLogin.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.czm.convivo.PlatformLogin.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.czm.convivo.PlatformLogin} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.czm.convivo.PlatformLogin.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPassword();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string userID = 1;
 * @return {string}
 */
proto.czm.convivo.PlatformLogin.prototype.getUserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.czm.convivo.PlatformLogin} returns this
 */
proto.czm.convivo.PlatformLogin.prototype.setUserid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string password = 2;
 * @return {string}
 */
proto.czm.convivo.PlatformLogin.prototype.getPassword = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.czm.convivo.PlatformLogin} returns this
 */
proto.czm.convivo.PlatformLogin.prototype.setPassword = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.czm.convivo.PlatformLogout.prototype.toObject = function(opt_includeInstance) {
  return proto.czm.convivo.PlatformLogout.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.czm.convivo.PlatformLogout} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.czm.convivo.PlatformLogout.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.czm.convivo.PlatformLogout}
 */
proto.czm.convivo.PlatformLogout.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.czm.convivo.PlatformLogout;
  return proto.czm.convivo.PlatformLogout.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.czm.convivo.PlatformLogout} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.czm.convivo.PlatformLogout}
 */
proto.czm.convivo.PlatformLogout.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.czm.convivo.PlatformLogout.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.czm.convivo.PlatformLogout.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.czm.convivo.PlatformLogout} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.czm.convivo.PlatformLogout.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.czm.convivo.Session.prototype.toObject = function(opt_includeInstance) {
  return proto.czm.convivo.Session.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.czm.convivo.Session} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.czm.convivo.Session.toObject = function(includeInstance, msg) {
  var f, obj = {
    sessionid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    authenticated: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    message: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.czm.convivo.Session}
 */
proto.czm.convivo.Session.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.czm.convivo.Session;
  return proto.czm.convivo.Session.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.czm.convivo.Session} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.czm.convivo.Session}
 */
proto.czm.convivo.Session.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSessionid(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAuthenticated(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.czm.convivo.Session.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.czm.convivo.Session.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.czm.convivo.Session} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.czm.convivo.Session.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSessionid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAuthenticated();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string sessionID = 1;
 * @return {string}
 */
proto.czm.convivo.Session.prototype.getSessionid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.czm.convivo.Session} returns this
 */
proto.czm.convivo.Session.prototype.setSessionid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool authenticated = 2;
 * @return {boolean}
 */
proto.czm.convivo.Session.prototype.getAuthenticated = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.czm.convivo.Session} returns this
 */
proto.czm.convivo.Session.prototype.setAuthenticated = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional string message = 3;
 * @return {string}
 */
proto.czm.convivo.Session.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.czm.convivo.Session} returns this
 */
proto.czm.convivo.Session.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.czm.convivo.Error.prototype.toObject = function(opt_includeInstance) {
  return proto.czm.convivo.Error.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.czm.convivo.Error} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.czm.convivo.Error.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    message: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.czm.convivo.Error}
 */
proto.czm.convivo.Error.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.czm.convivo.Error;
  return proto.czm.convivo.Error.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.czm.convivo.Error} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.czm.convivo.Error}
 */
proto.czm.convivo.Error.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.czm.convivo.Error.ErrorType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.czm.convivo.Error.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.czm.convivo.Error.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.czm.convivo.Error} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.czm.convivo.Error.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.czm.convivo.Error.ErrorType = {
  UNKNOWN: 0,
  USER_ALREADY_LOGGED_IN: 1,
  USER_SESSION_EXPIRED: 2,
  USER_AUTHENTICATION_SERVICE_NOT_AVAILABLE: 3,
  LOW_FPS_IN_BOUND: 4,
  LOW_FPS_OUT_BOUND: 5,
  IMAGE_COUNTER_INCONSISTENT: 6
};

/**
 * optional ErrorType type = 1;
 * @return {!proto.czm.convivo.Error.ErrorType}
 */
proto.czm.convivo.Error.prototype.getType = function() {
  return /** @type {!proto.czm.convivo.Error.ErrorType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.czm.convivo.Error.ErrorType} value
 * @return {!proto.czm.convivo.Error} returns this
 */
proto.czm.convivo.Error.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string message = 2;
 * @return {string}
 */
proto.czm.convivo.Error.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.czm.convivo.Error} returns this
 */
proto.czm.convivo.Error.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.czm.convivo.MachineDetails.prototype.toObject = function(opt_includeInstance) {
  return proto.czm.convivo.MachineDetails.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.czm.convivo.MachineDetails} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.czm.convivo.MachineDetails.toObject = function(includeInstance, msg) {
  var f, obj = {
    serialnumber: jspb.Message.getFieldWithDefault(msg, 1, ""),
    softwareversion: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.czm.convivo.MachineDetails}
 */
proto.czm.convivo.MachineDetails.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.czm.convivo.MachineDetails;
  return proto.czm.convivo.MachineDetails.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.czm.convivo.MachineDetails} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.czm.convivo.MachineDetails}
 */
proto.czm.convivo.MachineDetails.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSerialnumber(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSoftwareversion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.czm.convivo.MachineDetails.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.czm.convivo.MachineDetails.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.czm.convivo.MachineDetails} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.czm.convivo.MachineDetails.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSerialnumber();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSoftwareversion();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string serialNumber = 1;
 * @return {string}
 */
proto.czm.convivo.MachineDetails.prototype.getSerialnumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.czm.convivo.MachineDetails} returns this
 */
proto.czm.convivo.MachineDetails.prototype.setSerialnumber = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string softwareVersion = 2;
 * @return {string}
 */
proto.czm.convivo.MachineDetails.prototype.getSoftwareversion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.czm.convivo.MachineDetails} returns this
 */
proto.czm.convivo.MachineDetails.prototype.setSoftwareversion = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.czm.convivo.Case.prototype.toObject = function(opt_includeInstance) {
  return proto.czm.convivo.Case.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.czm.convivo.Case} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.czm.convivo.Case.toObject = function(includeInstance, msg) {
  var f, obj = {
    caseid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    surgeonid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    pathologistid: jspb.Message.getFieldWithDefault(msg, 3, ""),
    patient: (f = msg.getPatient()) && proto.czm.convivo.Patient.toObject(includeInstance, f),
    machinedetails: (f = msg.getMachinedetails()) && proto.czm.convivo.MachineDetails.toObject(includeInstance, f),
    surgeondata: (f = msg.getSurgeondata()) && proto.czm.convivo.UserInfo.toObject(includeInstance, f),
    pathologistdata: (f = msg.getPathologistdata()) && proto.czm.convivo.UserInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.czm.convivo.Case}
 */
proto.czm.convivo.Case.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.czm.convivo.Case;
  return proto.czm.convivo.Case.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.czm.convivo.Case} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.czm.convivo.Case}
 */
proto.czm.convivo.Case.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCaseid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSurgeonid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPathologistid(value);
      break;
    case 4:
      var value = new proto.czm.convivo.Patient;
      reader.readMessage(value,proto.czm.convivo.Patient.deserializeBinaryFromReader);
      msg.setPatient(value);
      break;
    case 5:
      var value = new proto.czm.convivo.MachineDetails;
      reader.readMessage(value,proto.czm.convivo.MachineDetails.deserializeBinaryFromReader);
      msg.setMachinedetails(value);
      break;
    case 6:
      var value = new proto.czm.convivo.UserInfo;
      reader.readMessage(value,proto.czm.convivo.UserInfo.deserializeBinaryFromReader);
      msg.setSurgeondata(value);
      break;
    case 7:
      var value = new proto.czm.convivo.UserInfo;
      reader.readMessage(value,proto.czm.convivo.UserInfo.deserializeBinaryFromReader);
      msg.setPathologistdata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.czm.convivo.Case.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.czm.convivo.Case.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.czm.convivo.Case} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.czm.convivo.Case.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCaseid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSurgeonid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPathologistid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getPatient();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.czm.convivo.Patient.serializeBinaryToWriter
    );
  }
  f = message.getMachinedetails();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.czm.convivo.MachineDetails.serializeBinaryToWriter
    );
  }
  f = message.getSurgeondata();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.czm.convivo.UserInfo.serializeBinaryToWriter
    );
  }
  f = message.getPathologistdata();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.czm.convivo.UserInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional string caseID = 1;
 * @return {string}
 */
proto.czm.convivo.Case.prototype.getCaseid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.czm.convivo.Case} returns this
 */
proto.czm.convivo.Case.prototype.setCaseid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string surgeonID = 2;
 * @return {string}
 */
proto.czm.convivo.Case.prototype.getSurgeonid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.czm.convivo.Case} returns this
 */
proto.czm.convivo.Case.prototype.setSurgeonid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string pathologistID = 3;
 * @return {string}
 */
proto.czm.convivo.Case.prototype.getPathologistid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.czm.convivo.Case} returns this
 */
proto.czm.convivo.Case.prototype.setPathologistid = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional Patient patient = 4;
 * @return {?proto.czm.convivo.Patient}
 */
proto.czm.convivo.Case.prototype.getPatient = function() {
  return /** @type{?proto.czm.convivo.Patient} */ (
    jspb.Message.getWrapperField(this, proto.czm.convivo.Patient, 4));
};


/**
 * @param {?proto.czm.convivo.Patient|undefined} value
 * @return {!proto.czm.convivo.Case} returns this
*/
proto.czm.convivo.Case.prototype.setPatient = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.czm.convivo.Case} returns this
 */
proto.czm.convivo.Case.prototype.clearPatient = function() {
  return this.setPatient(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.czm.convivo.Case.prototype.hasPatient = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional MachineDetails machineDetails = 5;
 * @return {?proto.czm.convivo.MachineDetails}
 */
proto.czm.convivo.Case.prototype.getMachinedetails = function() {
  return /** @type{?proto.czm.convivo.MachineDetails} */ (
    jspb.Message.getWrapperField(this, proto.czm.convivo.MachineDetails, 5));
};


/**
 * @param {?proto.czm.convivo.MachineDetails|undefined} value
 * @return {!proto.czm.convivo.Case} returns this
*/
proto.czm.convivo.Case.prototype.setMachinedetails = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.czm.convivo.Case} returns this
 */
proto.czm.convivo.Case.prototype.clearMachinedetails = function() {
  return this.setMachinedetails(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.czm.convivo.Case.prototype.hasMachinedetails = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional UserInfo surgeonData = 6;
 * @return {?proto.czm.convivo.UserInfo}
 */
proto.czm.convivo.Case.prototype.getSurgeondata = function() {
  return /** @type{?proto.czm.convivo.UserInfo} */ (
    jspb.Message.getWrapperField(this, proto.czm.convivo.UserInfo, 6));
};


/**
 * @param {?proto.czm.convivo.UserInfo|undefined} value
 * @return {!proto.czm.convivo.Case} returns this
*/
proto.czm.convivo.Case.prototype.setSurgeondata = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.czm.convivo.Case} returns this
 */
proto.czm.convivo.Case.prototype.clearSurgeondata = function() {
  return this.setSurgeondata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.czm.convivo.Case.prototype.hasSurgeondata = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional UserInfo pathologistData = 7;
 * @return {?proto.czm.convivo.UserInfo}
 */
proto.czm.convivo.Case.prototype.getPathologistdata = function() {
  return /** @type{?proto.czm.convivo.UserInfo} */ (
    jspb.Message.getWrapperField(this, proto.czm.convivo.UserInfo, 7));
};


/**
 * @param {?proto.czm.convivo.UserInfo|undefined} value
 * @return {!proto.czm.convivo.Case} returns this
*/
proto.czm.convivo.Case.prototype.setPathologistdata = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.czm.convivo.Case} returns this
 */
proto.czm.convivo.Case.prototype.clearPathologistdata = function() {
  return this.setPathologistdata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.czm.convivo.Case.prototype.hasPathologistdata = function() {
  return jspb.Message.getField(this, 7) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.czm.convivo.CaseEnd.prototype.toObject = function(opt_includeInstance) {
  return proto.czm.convivo.CaseEnd.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.czm.convivo.CaseEnd} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.czm.convivo.CaseEnd.toObject = function(includeInstance, msg) {
  var f, obj = {
    caseid: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.czm.convivo.CaseEnd}
 */
proto.czm.convivo.CaseEnd.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.czm.convivo.CaseEnd;
  return proto.czm.convivo.CaseEnd.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.czm.convivo.CaseEnd} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.czm.convivo.CaseEnd}
 */
proto.czm.convivo.CaseEnd.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCaseid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.czm.convivo.CaseEnd.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.czm.convivo.CaseEnd.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.czm.convivo.CaseEnd} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.czm.convivo.CaseEnd.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCaseid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string caseID = 1;
 * @return {string}
 */
proto.czm.convivo.CaseEnd.prototype.getCaseid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.czm.convivo.CaseEnd} returns this
 */
proto.czm.convivo.CaseEnd.prototype.setCaseid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.czm.convivo.ScanStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.czm.convivo.ScanStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.czm.convivo.ScanStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.czm.convivo.ScanStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    active: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    caseid: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.czm.convivo.ScanStatus}
 */
proto.czm.convivo.ScanStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.czm.convivo.ScanStatus;
  return proto.czm.convivo.ScanStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.czm.convivo.ScanStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.czm.convivo.ScanStatus}
 */
proto.czm.convivo.ScanStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setActive(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCaseid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.czm.convivo.ScanStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.czm.convivo.ScanStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.czm.convivo.ScanStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.czm.convivo.ScanStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getActive();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getCaseid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional bool active = 1;
 * @return {boolean}
 */
proto.czm.convivo.ScanStatus.prototype.getActive = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.czm.convivo.ScanStatus} returns this
 */
proto.czm.convivo.ScanStatus.prototype.setActive = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional string caseID = 2;
 * @return {string}
 */
proto.czm.convivo.ScanStatus.prototype.getCaseid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.czm.convivo.ScanStatus} returns this
 */
proto.czm.convivo.ScanStatus.prototype.setCaseid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.czm.convivo.Image.prototype.toObject = function(opt_includeInstance) {
  return proto.czm.convivo.Image.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.czm.convivo.Image} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.czm.convivo.Image.toObject = function(includeInstance, msg) {
  var f, obj = {
    format: jspb.Message.getFieldWithDefault(msg, 1, 0),
    data: msg.getData_asB64(),
    resolutionwidth: jspb.Message.getFieldWithDefault(msg, 3, 0),
    resolutionheight: jspb.Message.getFieldWithDefault(msg, 4, 0),
    targetresolutionwidth: jspb.Message.getFieldWithDefault(msg, 5, 0),
    targetresolutionheight: jspb.Message.getFieldWithDefault(msg, 6, 0),
    timestamp: jspb.Message.getFieldWithDefault(msg, 7, 0),
    spot: (f = msg.getSpot()) && proto.czm.convivo.Spot.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.czm.convivo.Image}
 */
proto.czm.convivo.Image.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.czm.convivo.Image;
  return proto.czm.convivo.Image.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.czm.convivo.Image} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.czm.convivo.Image}
 */
proto.czm.convivo.Image.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.czm.convivo.Image.ImageFormat} */ (reader.readEnum());
      msg.setFormat(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setResolutionwidth(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setResolutionheight(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTargetresolutionwidth(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTargetresolutionheight(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimestamp(value);
      break;
    case 8:
      var value = new proto.czm.convivo.Spot;
      reader.readMessage(value,proto.czm.convivo.Spot.deserializeBinaryFromReader);
      msg.setSpot(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.czm.convivo.Image.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.czm.convivo.Image.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.czm.convivo.Image} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.czm.convivo.Image.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFormat();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getResolutionwidth();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getResolutionheight();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getTargetresolutionwidth();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getTargetresolutionheight();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      7,
      f
    );
  }
  f = message.getSpot();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.czm.convivo.Spot.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.czm.convivo.Image.ImageFormat = {
  JPG: 0
};

/**
 * optional ImageFormat format = 1;
 * @return {!proto.czm.convivo.Image.ImageFormat}
 */
proto.czm.convivo.Image.prototype.getFormat = function() {
  return /** @type {!proto.czm.convivo.Image.ImageFormat} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.czm.convivo.Image.ImageFormat} value
 * @return {!proto.czm.convivo.Image} returns this
 */
proto.czm.convivo.Image.prototype.setFormat = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional bytes data = 2;
 * @return {!(string|Uint8Array)}
 */
proto.czm.convivo.Image.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes data = 2;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.czm.convivo.Image.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.czm.convivo.Image.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.czm.convivo.Image} returns this
 */
proto.czm.convivo.Image.prototype.setData = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional int32 resolutionWidth = 3;
 * @return {number}
 */
proto.czm.convivo.Image.prototype.getResolutionwidth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.czm.convivo.Image} returns this
 */
proto.czm.convivo.Image.prototype.setResolutionwidth = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 resolutionHeight = 4;
 * @return {number}
 */
proto.czm.convivo.Image.prototype.getResolutionheight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.czm.convivo.Image} returns this
 */
proto.czm.convivo.Image.prototype.setResolutionheight = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 targetResolutionWidth = 5;
 * @return {number}
 */
proto.czm.convivo.Image.prototype.getTargetresolutionwidth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.czm.convivo.Image} returns this
 */
proto.czm.convivo.Image.prototype.setTargetresolutionwidth = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int32 targetResolutionHeight = 6;
 * @return {number}
 */
proto.czm.convivo.Image.prototype.getTargetresolutionheight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.czm.convivo.Image} returns this
 */
proto.czm.convivo.Image.prototype.setTargetresolutionheight = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int64 timestamp = 7;
 * @return {number}
 */
proto.czm.convivo.Image.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.czm.convivo.Image} returns this
 */
proto.czm.convivo.Image.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional Spot spot = 8;
 * @return {?proto.czm.convivo.Spot}
 */
proto.czm.convivo.Image.prototype.getSpot = function() {
  return /** @type{?proto.czm.convivo.Spot} */ (
    jspb.Message.getWrapperField(this, proto.czm.convivo.Spot, 8));
};


/**
 * @param {?proto.czm.convivo.Spot|undefined} value
 * @return {!proto.czm.convivo.Image} returns this
*/
proto.czm.convivo.Image.prototype.setSpot = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.czm.convivo.Image} returns this
 */
proto.czm.convivo.Image.prototype.clearSpot = function() {
  return this.setSpot(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.czm.convivo.Image.prototype.hasSpot = function() {
  return jspb.Message.getField(this, 8) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.czm.convivo.ImageMeta.prototype.toObject = function(opt_includeInstance) {
  return proto.czm.convivo.ImageMeta.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.czm.convivo.ImageMeta} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.czm.convivo.ImageMeta.toObject = function(includeInstance, msg) {
  var f, obj = {
    focus: jspb.Message.getFieldWithDefault(msg, 1, 0),
    brightness: jspb.Message.getFieldWithDefault(msg, 2, 0),
    gain: jspb.Message.getFieldWithDefault(msg, 3, 0),
    autobrigthness: jspb.Message.getBooleanFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.czm.convivo.ImageMeta}
 */
proto.czm.convivo.ImageMeta.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.czm.convivo.ImageMeta;
  return proto.czm.convivo.ImageMeta.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.czm.convivo.ImageMeta} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.czm.convivo.ImageMeta}
 */
proto.czm.convivo.ImageMeta.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFocus(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setBrightness(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGain(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAutobrigthness(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.czm.convivo.ImageMeta.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.czm.convivo.ImageMeta.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.czm.convivo.ImageMeta} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.czm.convivo.ImageMeta.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFocus();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getBrightness();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getGain();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getAutobrigthness();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * optional int32 focus = 1;
 * @return {number}
 */
proto.czm.convivo.ImageMeta.prototype.getFocus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.czm.convivo.ImageMeta} returns this
 */
proto.czm.convivo.ImageMeta.prototype.setFocus = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 brightness = 2;
 * @return {number}
 */
proto.czm.convivo.ImageMeta.prototype.getBrightness = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.czm.convivo.ImageMeta} returns this
 */
proto.czm.convivo.ImageMeta.prototype.setBrightness = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 gain = 3;
 * @return {number}
 */
proto.czm.convivo.ImageMeta.prototype.getGain = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.czm.convivo.ImageMeta} returns this
 */
proto.czm.convivo.ImageMeta.prototype.setGain = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bool autoBrigthness = 4;
 * @return {boolean}
 */
proto.czm.convivo.ImageMeta.prototype.getAutobrigthness = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.czm.convivo.ImageMeta} returns this
 */
proto.czm.convivo.ImageMeta.prototype.setAutobrigthness = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.czm.convivo.Spot.prototype.toObject = function(opt_includeInstance) {
  return proto.czm.convivo.Spot.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.czm.convivo.Spot} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.czm.convivo.Spot.toObject = function(includeInstance, msg) {
  var f, obj = {
    label: jspb.Message.getFieldWithDefault(msg, 1, ""),
    colour: (f = msg.getColour()) && proto.czm.convivo.RGBColour.toObject(includeInstance, f),
    comment: jspb.Message.getFieldWithDefault(msg, 3, ""),
    location: jspb.Message.getFieldWithDefault(msg, 4, ""),
    side: jspb.Message.getFieldWithDefault(msg, 5, ""),
    tissuetype: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.czm.convivo.Spot}
 */
proto.czm.convivo.Spot.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.czm.convivo.Spot;
  return proto.czm.convivo.Spot.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.czm.convivo.Spot} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.czm.convivo.Spot}
 */
proto.czm.convivo.Spot.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLabel(value);
      break;
    case 2:
      var value = new proto.czm.convivo.RGBColour;
      reader.readMessage(value,proto.czm.convivo.RGBColour.deserializeBinaryFromReader);
      msg.setColour(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setComment(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setLocation(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setSide(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setTissuetype(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.czm.convivo.Spot.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.czm.convivo.Spot.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.czm.convivo.Spot} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.czm.convivo.Spot.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLabel();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getColour();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.czm.convivo.RGBColour.serializeBinaryToWriter
    );
  }
  f = message.getComment();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getLocation();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getSide();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getTissuetype();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional string label = 1;
 * @return {string}
 */
proto.czm.convivo.Spot.prototype.getLabel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.czm.convivo.Spot} returns this
 */
proto.czm.convivo.Spot.prototype.setLabel = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional RGBColour colour = 2;
 * @return {?proto.czm.convivo.RGBColour}
 */
proto.czm.convivo.Spot.prototype.getColour = function() {
  return /** @type{?proto.czm.convivo.RGBColour} */ (
    jspb.Message.getWrapperField(this, proto.czm.convivo.RGBColour, 2));
};


/**
 * @param {?proto.czm.convivo.RGBColour|undefined} value
 * @return {!proto.czm.convivo.Spot} returns this
*/
proto.czm.convivo.Spot.prototype.setColour = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.czm.convivo.Spot} returns this
 */
proto.czm.convivo.Spot.prototype.clearColour = function() {
  return this.setColour(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.czm.convivo.Spot.prototype.hasColour = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string comment = 3;
 * @return {string}
 */
proto.czm.convivo.Spot.prototype.getComment = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.czm.convivo.Spot} returns this
 */
proto.czm.convivo.Spot.prototype.setComment = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string location = 4;
 * @return {string}
 */
proto.czm.convivo.Spot.prototype.getLocation = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.czm.convivo.Spot} returns this
 */
proto.czm.convivo.Spot.prototype.setLocation = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string side = 5;
 * @return {string}
 */
proto.czm.convivo.Spot.prototype.getSide = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.czm.convivo.Spot} returns this
 */
proto.czm.convivo.Spot.prototype.setSide = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string tissueType = 6;
 * @return {string}
 */
proto.czm.convivo.Spot.prototype.getTissuetype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.czm.convivo.Spot} returns this
 */
proto.czm.convivo.Spot.prototype.setTissuetype = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.czm.convivo.RGBColour.prototype.toObject = function(opt_includeInstance) {
  return proto.czm.convivo.RGBColour.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.czm.convivo.RGBColour} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.czm.convivo.RGBColour.toObject = function(includeInstance, msg) {
  var f, obj = {
    r: jspb.Message.getFieldWithDefault(msg, 1, 0),
    g: jspb.Message.getFieldWithDefault(msg, 2, 0),
    b: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.czm.convivo.RGBColour}
 */
proto.czm.convivo.RGBColour.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.czm.convivo.RGBColour;
  return proto.czm.convivo.RGBColour.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.czm.convivo.RGBColour} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.czm.convivo.RGBColour}
 */
proto.czm.convivo.RGBColour.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setR(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setG(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setB(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.czm.convivo.RGBColour.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.czm.convivo.RGBColour.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.czm.convivo.RGBColour} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.czm.convivo.RGBColour.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getR();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getG();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getB();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional uint32 r = 1;
 * @return {number}
 */
proto.czm.convivo.RGBColour.prototype.getR = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.czm.convivo.RGBColour} returns this
 */
proto.czm.convivo.RGBColour.prototype.setR = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 g = 2;
 * @return {number}
 */
proto.czm.convivo.RGBColour.prototype.getG = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.czm.convivo.RGBColour} returns this
 */
proto.czm.convivo.RGBColour.prototype.setG = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 b = 3;
 * @return {number}
 */
proto.czm.convivo.RGBColour.prototype.getB = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.czm.convivo.RGBColour} returns this
 */
proto.czm.convivo.RGBColour.prototype.setB = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.czm.convivo.ImageForCase.prototype.toObject = function(opt_includeInstance) {
  return proto.czm.convivo.ImageForCase.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.czm.convivo.ImageForCase} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.czm.convivo.ImageForCase.toObject = function(includeInstance, msg) {
  var f, obj = {
    image: (f = msg.getImage()) && proto.czm.convivo.Image.toObject(includeInstance, f),
    meta: (f = msg.getMeta()) && proto.czm.convivo.ImageMeta.toObject(includeInstance, f),
    caseid: jspb.Message.getFieldWithDefault(msg, 3, ""),
    counter: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.czm.convivo.ImageForCase}
 */
proto.czm.convivo.ImageForCase.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.czm.convivo.ImageForCase;
  return proto.czm.convivo.ImageForCase.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.czm.convivo.ImageForCase} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.czm.convivo.ImageForCase}
 */
proto.czm.convivo.ImageForCase.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.czm.convivo.Image;
      reader.readMessage(value,proto.czm.convivo.Image.deserializeBinaryFromReader);
      msg.setImage(value);
      break;
    case 2:
      var value = new proto.czm.convivo.ImageMeta;
      reader.readMessage(value,proto.czm.convivo.ImageMeta.deserializeBinaryFromReader);
      msg.setMeta(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCaseid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setCounter(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.czm.convivo.ImageForCase.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.czm.convivo.ImageForCase.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.czm.convivo.ImageForCase} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.czm.convivo.ImageForCase.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getImage();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.czm.convivo.Image.serializeBinaryToWriter
    );
  }
  f = message.getMeta();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.czm.convivo.ImageMeta.serializeBinaryToWriter
    );
  }
  f = message.getCaseid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getCounter();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
};


/**
 * optional Image image = 1;
 * @return {?proto.czm.convivo.Image}
 */
proto.czm.convivo.ImageForCase.prototype.getImage = function() {
  return /** @type{?proto.czm.convivo.Image} */ (
    jspb.Message.getWrapperField(this, proto.czm.convivo.Image, 1));
};


/**
 * @param {?proto.czm.convivo.Image|undefined} value
 * @return {!proto.czm.convivo.ImageForCase} returns this
*/
proto.czm.convivo.ImageForCase.prototype.setImage = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.czm.convivo.ImageForCase} returns this
 */
proto.czm.convivo.ImageForCase.prototype.clearImage = function() {
  return this.setImage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.czm.convivo.ImageForCase.prototype.hasImage = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ImageMeta meta = 2;
 * @return {?proto.czm.convivo.ImageMeta}
 */
proto.czm.convivo.ImageForCase.prototype.getMeta = function() {
  return /** @type{?proto.czm.convivo.ImageMeta} */ (
    jspb.Message.getWrapperField(this, proto.czm.convivo.ImageMeta, 2));
};


/**
 * @param {?proto.czm.convivo.ImageMeta|undefined} value
 * @return {!proto.czm.convivo.ImageForCase} returns this
*/
proto.czm.convivo.ImageForCase.prototype.setMeta = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.czm.convivo.ImageForCase} returns this
 */
proto.czm.convivo.ImageForCase.prototype.clearMeta = function() {
  return this.setMeta(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.czm.convivo.ImageForCase.prototype.hasMeta = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string caseID = 3;
 * @return {string}
 */
proto.czm.convivo.ImageForCase.prototype.getCaseid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.czm.convivo.ImageForCase} returns this
 */
proto.czm.convivo.ImageForCase.prototype.setCaseid = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional uint64 counter = 4;
 * @return {number}
 */
proto.czm.convivo.ImageForCase.prototype.getCounter = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.czm.convivo.ImageForCase} returns this
 */
proto.czm.convivo.ImageForCase.prototype.setCounter = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.czm.convivo.Patient.prototype.toObject = function(opt_includeInstance) {
  return proto.czm.convivo.Patient.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.czm.convivo.Patient} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.czm.convivo.Patient.toObject = function(includeInstance, msg) {
  var f, obj = {
    patientid: (f = msg.getPatientid()) && proto.czm.convivo.PatientID.toObject(includeInstance, f),
    sex: jspb.Message.getFieldWithDefault(msg, 2, 0),
    firstname: jspb.Message.getFieldWithDefault(msg, 3, ""),
    lastname: jspb.Message.getFieldWithDefault(msg, 4, ""),
    dateofbirth: jspb.Message.getFieldWithDefault(msg, 5, ""),
    comment: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.czm.convivo.Patient}
 */
proto.czm.convivo.Patient.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.czm.convivo.Patient;
  return proto.czm.convivo.Patient.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.czm.convivo.Patient} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.czm.convivo.Patient}
 */
proto.czm.convivo.Patient.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.czm.convivo.PatientID;
      reader.readMessage(value,proto.czm.convivo.PatientID.deserializeBinaryFromReader);
      msg.setPatientid(value);
      break;
    case 2:
      var value = /** @type {!proto.czm.convivo.Sex} */ (reader.readEnum());
      msg.setSex(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setFirstname(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setLastname(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setDateofbirth(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setComment(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.czm.convivo.Patient.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.czm.convivo.Patient.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.czm.convivo.Patient} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.czm.convivo.Patient.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPatientid();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.czm.convivo.PatientID.serializeBinaryToWriter
    );
  }
  f = message.getSex();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getFirstname();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getLastname();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getDateofbirth();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getComment();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional PatientID patientID = 1;
 * @return {?proto.czm.convivo.PatientID}
 */
proto.czm.convivo.Patient.prototype.getPatientid = function() {
  return /** @type{?proto.czm.convivo.PatientID} */ (
    jspb.Message.getWrapperField(this, proto.czm.convivo.PatientID, 1));
};


/**
 * @param {?proto.czm.convivo.PatientID|undefined} value
 * @return {!proto.czm.convivo.Patient} returns this
*/
proto.czm.convivo.Patient.prototype.setPatientid = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.czm.convivo.Patient} returns this
 */
proto.czm.convivo.Patient.prototype.clearPatientid = function() {
  return this.setPatientid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.czm.convivo.Patient.prototype.hasPatientid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Sex sex = 2;
 * @return {!proto.czm.convivo.Sex}
 */
proto.czm.convivo.Patient.prototype.getSex = function() {
  return /** @type {!proto.czm.convivo.Sex} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.czm.convivo.Sex} value
 * @return {!proto.czm.convivo.Patient} returns this
 */
proto.czm.convivo.Patient.prototype.setSex = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional string firstName = 3;
 * @return {string}
 */
proto.czm.convivo.Patient.prototype.getFirstname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.czm.convivo.Patient} returns this
 */
proto.czm.convivo.Patient.prototype.setFirstname = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string lastName = 4;
 * @return {string}
 */
proto.czm.convivo.Patient.prototype.getLastname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.czm.convivo.Patient} returns this
 */
proto.czm.convivo.Patient.prototype.setLastname = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string dateOfBirth = 5;
 * @return {string}
 */
proto.czm.convivo.Patient.prototype.getDateofbirth = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.czm.convivo.Patient} returns this
 */
proto.czm.convivo.Patient.prototype.setDateofbirth = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string comment = 6;
 * @return {string}
 */
proto.czm.convivo.Patient.prototype.getComment = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.czm.convivo.Patient} returns this
 */
proto.czm.convivo.Patient.prototype.setComment = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.czm.convivo.PatientID.prototype.toObject = function(opt_includeInstance) {
  return proto.czm.convivo.PatientID.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.czm.convivo.PatientID} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.czm.convivo.PatientID.toObject = function(includeInstance, msg) {
  var f, obj = {
    patientid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    issuer: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.czm.convivo.PatientID}
 */
proto.czm.convivo.PatientID.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.czm.convivo.PatientID;
  return proto.czm.convivo.PatientID.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.czm.convivo.PatientID} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.czm.convivo.PatientID}
 */
proto.czm.convivo.PatientID.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPatientid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setIssuer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.czm.convivo.PatientID.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.czm.convivo.PatientID.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.czm.convivo.PatientID} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.czm.convivo.PatientID.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPatientid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getIssuer();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string patientID = 1;
 * @return {string}
 */
proto.czm.convivo.PatientID.prototype.getPatientid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.czm.convivo.PatientID} returns this
 */
proto.czm.convivo.PatientID.prototype.setPatientid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string issuer = 2;
 * @return {string}
 */
proto.czm.convivo.PatientID.prototype.getIssuer = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.czm.convivo.PatientID} returns this
 */
proto.czm.convivo.PatientID.prototype.setIssuer = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.czm.convivo.AvailablePathologists.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.czm.convivo.AvailablePathologists.prototype.toObject = function(opt_includeInstance) {
  return proto.czm.convivo.AvailablePathologists.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.czm.convivo.AvailablePathologists} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.czm.convivo.AvailablePathologists.toObject = function(includeInstance, msg) {
  var f, obj = {
    pathologistsList: jspb.Message.toObjectList(msg.getPathologistsList(),
    proto.czm.convivo.Pathologist.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.czm.convivo.AvailablePathologists}
 */
proto.czm.convivo.AvailablePathologists.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.czm.convivo.AvailablePathologists;
  return proto.czm.convivo.AvailablePathologists.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.czm.convivo.AvailablePathologists} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.czm.convivo.AvailablePathologists}
 */
proto.czm.convivo.AvailablePathologists.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.czm.convivo.Pathologist;
      reader.readMessage(value,proto.czm.convivo.Pathologist.deserializeBinaryFromReader);
      msg.addPathologists(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.czm.convivo.AvailablePathologists.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.czm.convivo.AvailablePathologists.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.czm.convivo.AvailablePathologists} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.czm.convivo.AvailablePathologists.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPathologistsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.czm.convivo.Pathologist.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Pathologist pathologists = 1;
 * @return {!Array<!proto.czm.convivo.Pathologist>}
 */
proto.czm.convivo.AvailablePathologists.prototype.getPathologistsList = function() {
  return /** @type{!Array<!proto.czm.convivo.Pathologist>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.czm.convivo.Pathologist, 1));
};


/**
 * @param {!Array<!proto.czm.convivo.Pathologist>} value
 * @return {!proto.czm.convivo.AvailablePathologists} returns this
*/
proto.czm.convivo.AvailablePathologists.prototype.setPathologistsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.czm.convivo.Pathologist=} opt_value
 * @param {number=} opt_index
 * @return {!proto.czm.convivo.Pathologist}
 */
proto.czm.convivo.AvailablePathologists.prototype.addPathologists = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.czm.convivo.Pathologist, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.czm.convivo.AvailablePathologists} returns this
 */
proto.czm.convivo.AvailablePathologists.prototype.clearPathologistsList = function() {
  return this.setPathologistsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.czm.convivo.Pathologist.prototype.toObject = function(opt_includeInstance) {
  return proto.czm.convivo.Pathologist.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.czm.convivo.Pathologist} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.czm.convivo.Pathologist.toObject = function(includeInstance, msg) {
  var f, obj = {
    userid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    title: jspb.Message.getFieldWithDefault(msg, 2, ""),
    firstname: jspb.Message.getFieldWithDefault(msg, 3, ""),
    lastname: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.czm.convivo.Pathologist}
 */
proto.czm.convivo.Pathologist.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.czm.convivo.Pathologist;
  return proto.czm.convivo.Pathologist.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.czm.convivo.Pathologist} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.czm.convivo.Pathologist}
 */
proto.czm.convivo.Pathologist.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitle(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setFirstname(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setLastname(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.czm.convivo.Pathologist.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.czm.convivo.Pathologist.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.czm.convivo.Pathologist} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.czm.convivo.Pathologist.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTitle();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getFirstname();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getLastname();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string userID = 1;
 * @return {string}
 */
proto.czm.convivo.Pathologist.prototype.getUserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.czm.convivo.Pathologist} returns this
 */
proto.czm.convivo.Pathologist.prototype.setUserid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string title = 2;
 * @return {string}
 */
proto.czm.convivo.Pathologist.prototype.getTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.czm.convivo.Pathologist} returns this
 */
proto.czm.convivo.Pathologist.prototype.setTitle = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string firstName = 3;
 * @return {string}
 */
proto.czm.convivo.Pathologist.prototype.getFirstname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.czm.convivo.Pathologist} returns this
 */
proto.czm.convivo.Pathologist.prototype.setFirstname = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string lastName = 4;
 * @return {string}
 */
proto.czm.convivo.Pathologist.prototype.getLastname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.czm.convivo.Pathologist} returns this
 */
proto.czm.convivo.Pathologist.prototype.setLastname = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.czm.convivo.UserInfo.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.czm.convivo.UserInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.czm.convivo.UserInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.czm.convivo.UserInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.czm.convivo.UserInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    firstname: jspb.Message.getFieldWithDefault(msg, 1, ""),
    lastname: jspb.Message.getFieldWithDefault(msg, 2, ""),
    userid: jspb.Message.getFieldWithDefault(msg, 3, ""),
    emailaddress: jspb.Message.getFieldWithDefault(msg, 4, ""),
    roleList: (f = jspb.Message.getRepeatedField(msg, 5)) == null ? undefined : f,
    title: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.czm.convivo.UserInfo}
 */
proto.czm.convivo.UserInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.czm.convivo.UserInfo;
  return proto.czm.convivo.UserInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.czm.convivo.UserInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.czm.convivo.UserInfo}
 */
proto.czm.convivo.UserInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFirstname(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setLastname(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserid(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setEmailaddress(value);
      break;
    case 5:
      var value = /** @type {!Array<!proto.czm.convivo.UserInfo.Role>} */ (reader.readPackedEnum());
      msg.setRoleList(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitle(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.czm.convivo.UserInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.czm.convivo.UserInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.czm.convivo.UserInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.czm.convivo.UserInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFirstname();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getLastname();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getUserid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getEmailaddress();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getRoleList();
  if (f.length > 0) {
    writer.writePackedEnum(
      5,
      f
    );
  }
  f = message.getTitle();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.czm.convivo.UserInfo.Role = {
  SURGEON: 0,
  PATHOLOGIST: 1
};

/**
 * optional string firstName = 1;
 * @return {string}
 */
proto.czm.convivo.UserInfo.prototype.getFirstname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.czm.convivo.UserInfo} returns this
 */
proto.czm.convivo.UserInfo.prototype.setFirstname = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string lastName = 2;
 * @return {string}
 */
proto.czm.convivo.UserInfo.prototype.getLastname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.czm.convivo.UserInfo} returns this
 */
proto.czm.convivo.UserInfo.prototype.setLastname = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string userID = 3;
 * @return {string}
 */
proto.czm.convivo.UserInfo.prototype.getUserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.czm.convivo.UserInfo} returns this
 */
proto.czm.convivo.UserInfo.prototype.setUserid = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string emailAddress = 4;
 * @return {string}
 */
proto.czm.convivo.UserInfo.prototype.getEmailaddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.czm.convivo.UserInfo} returns this
 */
proto.czm.convivo.UserInfo.prototype.setEmailaddress = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * repeated Role role = 5;
 * @return {!Array<!proto.czm.convivo.UserInfo.Role>}
 */
proto.czm.convivo.UserInfo.prototype.getRoleList = function() {
  return /** @type {!Array<!proto.czm.convivo.UserInfo.Role>} */ (jspb.Message.getRepeatedField(this, 5));
};


/**
 * @param {!Array<!proto.czm.convivo.UserInfo.Role>} value
 * @return {!proto.czm.convivo.UserInfo} returns this
 */
proto.czm.convivo.UserInfo.prototype.setRoleList = function(value) {
  return jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {!proto.czm.convivo.UserInfo.Role} value
 * @param {number=} opt_index
 * @return {!proto.czm.convivo.UserInfo} returns this
 */
proto.czm.convivo.UserInfo.prototype.addRole = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.czm.convivo.UserInfo} returns this
 */
proto.czm.convivo.UserInfo.prototype.clearRoleList = function() {
  return this.setRoleList([]);
};


/**
 * optional string title = 6;
 * @return {string}
 */
proto.czm.convivo.UserInfo.prototype.getTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.czm.convivo.UserInfo} returns this
 */
proto.czm.convivo.UserInfo.prototype.setTitle = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * @enum {number}
 */
proto.czm.convivo.Sex = {
  UNKNOWN: 0,
  FEMALE: 1,
  MALE: 2,
  OTHER: 3
};

goog.object.extend(exports, proto.czm.convivo);
